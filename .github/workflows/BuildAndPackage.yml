name: CI Workflow

permissions:
  contents: write
  packages: write
  actions: write

on:
  push:
    tags:
      - '[0-9]*.[0-9]*'
      - '[0-9]*.[0-9]*.[0-9]*'

env:
  PKG_NAME: jtreesize
  MAIN_CLASS: org.ligson.jtreesize.App

jobs:
  build-and-package:
    strategy:
      matrix:
        include:
          - os: windows-latest
            architecture: x64
          - os: ubuntu-latest
            architecture: x64
          - os: ubuntu-latest
            architecture: aarch64
          - os: macos-latest
            architecture: x64
          - os: macos-latest
            architecture: aarch64
    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.os }} with ${{ matrix.architecture }}
    env:
      VERSION: ${{ github.ref_name }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取所有历史记录

      - name: Check Runner Architecture
        run: |
          echo "Runner architecture: $(uname -m)"

      - name: Set up JDK 21 and Maven Cache
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"  # 使用 Eclipse Temurin 发行版
          java-version: "21"
          cache: "maven"
          jvmArchitecture: ${{ matrix.architecture }}

      - name: Verify VERSION
        run: echo "Extracted VERSION is ${{ env.VERSION }}"

      - name: Build with Maven
        run: mvn clean package '-Dmaven.test.skip=true'

      - name: Prepare Output Directory
        run: mkdir -p dist

      - name: Extract Packaged Archive
        run: |
          tar -zxvf target/${{ env.PKG_NAME }}-${{ env.VERSION }}-${{ env.PKG_NAME }}.tar.gz -C target/

      - name: Install WiX
        if: runner.os == 'Windows'
        run: dotnet tool install --global wix

      - name: Package Application with jpackage (Windows)
        if: runner.os == 'Windows'
        run: |
          jpackage `
            --input . `
            --name ${{ env.PKG_NAME }} `
            --main-jar lib/${{ env.PKG_NAME }}-${{ env.VERSION }}.jar `
            --main-class ${{ env.MAIN_CLASS }} `
            --type exe `
            --resource-dir conf `
            --icon conf/treesize.ico `
            --win-dir-chooser `
            --win-shortcut `
            --app-version ${{ env.VERSION }}
          Move-Item "${{ env.PKG_NAME }}-${{ env.VERSION }}.exe" "../../dist/${{ env.PKG_NAME }}-${{ env.VERSION }}-Windows-${{ matrix.architecture }}.exe"
        working-directory: target/${{ env.PKG_NAME }}-${{ env.VERSION }}

      - name: Package Application with jpackage (macOS)
        if: runner.os == 'macOS'
        run: |
          jpackage \
            --input . \
            --name ${{ env.PKG_NAME }} \
            --main-jar lib/${{ env.PKG_NAME }}-${{ env.VERSION }}.jar \
            --main-class ${{ env.MAIN_CLASS }} \
            --type dmg \
            --resource-dir conf \
            --icon conf/treesize.icns \
            --app-version ${{ env.VERSION }}
          mv ${{ env.PKG_NAME }}-${{ env.VERSION }}.dmg ../../dist/${{ env.PKG_NAME }}-${{ env.VERSION }}-macOS-${{ matrix.architecture }}.dmg
        working-directory: target/${{ env.PKG_NAME }}-${{ env.VERSION }}

      - name: Package Application with jpackage (Linux)
        if: runner.os == 'Linux'
        run: |
          jpackage \
            --input . \
            --name ${{ env.PKG_NAME }} \
            --main-jar lib/${{ env.PKG_NAME }}-${{ env.VERSION }}.jar \
            --main-class ${{ env.MAIN_CLASS }} \
            --type app-image \
            --resource-dir conf \
            --icon conf/treesize.png \
            --app-version ${{ env.VERSION }} \
            --dest ../../app-image

          # 压缩 app-image 目录为 tar.gz
          tar -czvf ${{ env.PKG_NAME }}-${{ env.VERSION }}-Linux-${{ matrix.architecture }}.tar.gz -C ../../ app-image/${{ env.PKG_NAME }}

          # 移动压缩包到 dist 目录
          mv ${{ env.PKG_NAME }}-${{ env.VERSION }}-Linux-${{ matrix.architecture }}.tar.gz ../../dist/
        working-directory: target/${{ env.PKG_NAME }}-${{ env.VERSION }}

      - name: List dist directory (Windows)
        if: runner.os == 'Windows'
        run: Get-ChildItem dist

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PKG_NAME }}-${{ env.VERSION }}-${{ matrix.os }}-${{ matrix.architecture }}
          path: dist/

  generate-changelog:
    runs-on: ubuntu-latest
    needs: build-and-package
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 确保获取完整历史记录
      
      - name: Generate Changelog
        run: |
          # 获取当前日期
          CURRENT_DATE=$(date +"%Y-%m-%d")
          
          # 获取所有标签，按创建日期降序排序
          TAGS=($(git tag --sort=-creatordate))
          
          LATEST_TAG=${TAGS[0]}
          
          if [ ${#TAGS[@]} -ge 2 ]; then
            PREVIOUS_TAG=${TAGS[1]}
            # 获取两个标签之间的提交记录
            git log --pretty=format:"* %s" "$PREVIOUS_TAG..$LATEST_TAG" > temp_changelog.md
          else
            # 只有一个标签，获取该标签的所有提交记录
            git log --pretty=format:"* %s" "$LATEST_TAG" > temp_changelog.md
          fi
          
          # 生成 CHANGELOG.md
          echo "# $LATEST_TAG ($CURRENT_DATE)" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          cat temp_changelog.md >> CHANGELOG.md
          rm temp_changelog.md
      
      - name: Upload Changelog
        uses: actions/upload-artifact@v3
        with:
          name: changelog
          path: CHANGELOG.md

  create-release:
    runs-on: ubuntu-latest
    needs: [build-and-package, generate-changelog]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Download Changelog
        uses: actions/download-artifact@v3
        with:
          name: changelog
          path: .
      
      # 明确下载每个工件
      - name: Download Windows x64 Artifact
        uses: actions/download-artifact@v3
        with:
          name: jtreesize-${{ github.ref_name }}-windows-latest-x64
          path: dist/

      - name: Download Windows aarch64 Artifact
        uses: actions/download-artifact@v3
        with:
          name: jtreesize-${{ github.ref_name }}-windows-latest-aarch64
          path: dist/
      
      - name: Download Ubuntu x64 Artifact
        uses: actions/download-artifact@v3
        with:
          name: jtreesize-${{ github.ref_name }}-ubuntu-latest-x64
          path: dist/

      - name: Download Ubuntu aarch64 Artifact
        uses: actions/download-artifact@v3
        with:
          name: jtreesize-${{ github.ref_name }}-ubuntu-latest-aarch64
          path: dist/
      
      - name: Download macOS x64 Artifact
        uses: actions/download-artifact@v3
        with:
          name: jtreesize-${{ github.ref_name }}-macos-latest-x64
          path: dist/

      - name: Download macOS aarch64 Artifact
        uses: actions/download-artifact@v3
        with:
          name: jtreesize-${{ github.ref_name }}-macos-latest-aarch64
          path: dist/
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body_path: CHANGELOG.md
          files: |
            dist/jtreesize-${{ github.ref_name }}-Windows-x64.exe
            dist/jtreesize-${{ github.ref_name }}-Linux-x64.tar.gz
            dist/jtreesize-${{ github.ref_name }}-Linux-aarch64.tar.gz
            dist/jtreesize-${{ github.ref_name }}-macOS-x64.dmg
            dist/jtreesize-${{ github.ref_name }}-macOS-aarch64.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}